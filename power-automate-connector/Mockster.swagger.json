{
  "swagger": "2.0",
  "info": {
    "x-ms-summary": "Mockster",
    "description": "Say bye bye to Lorem ipsum! Used to generate random data for all kinds of purposes. Generated data is mimicking something that might be in the real world.",
    "version": "1.0"
  },
  "host": "apim-mockster-dev.azure-api.net",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/airlines": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "aircraftType": {
                    "type": "string",
                    "description": "Returns a random aircraft type: regional, narrowbody or widebody.",
                    "x-ms-summary": "Aircraft Type",
                    "x-ms-visibility": "advanced"
                  },
                  "airlineName": {
                    "type": "string",
                    "description": "Returns a random airline name. For example: Sky Airline.",
                    "x-ms-summary": "Airline Name",
                    "x-ms-visibility": "important"
                  },
                  "airlineCode": {
                    "type": "string",
                    "description": "Returns a random airline IATA code. For example: H2.",
                    "x-ms-summary": "Airline IATA Code",
                    "x-ms-visibility": "advanced"
                  },
                  "airplaneName": {
                    "type": "string",
                    "description": "Returns a random airplane name. For example: De Havilland DH.104 Dove.",
                    "x-ms-summary": "Name",
                    "x-ms-visibility": "important"
                  },
                  "airplaneTypeCode":  {
                    "type": "string",
                    "description": "Returns a random airplane name. For example: DHD.",
                    "x-ms-summary": "Airplane IATA Type Code",
                    "x-ms-visibility": "advanced"
                  },
                  "departureAirportName": {
                    "type": "string",
                    "description": "Returns a random departure airport name. For example: Indira Gandhi International Airport.",
                    "x-ms-summary": "Departure Airport Name",
                    "x-ms-visibility": "important"
                  },
                  "departureAirportCode": {
                    "type": "string",
                    "description": "Returns a random departure airport IATA code. For example: DEL.",
                    "x-ms-summary": "Departure Airport IATA Code",
                    "x-ms-visibility": "advanced"
                  },
                  "arrivalAirportName": {
                    "type": "string",
                    "description": "Returns a random arrival airport name. For example: Perth Airport.",
                    "x-ms-summary": "Arrival Airport Name",
                    "x-ms-visibility": "important"
                  },
                  "arrivalAirportCode": {
                    "type": "string",
                    "description": "Returns a random arrival airport IATA code. For example: PER.",
                    "x-ms-summary": "Arrival Airport IATA Code",
                    "x-ms-visibility": "advanced"
                  },
                  "flightNumber": {
                    "type": "string",
                    "description": "Returns a random flight number. For example: H20316. Flight numbers are 1 to 4 numbers long. Leading zeros are added as well as airline IATA code to generate commonly used format.",
                    "x-ms-summary": "Flight Number",
                    "x-ms-visibility": "important"
                  },
                  "recordLocator": {
                    "type": "string",
                    "description": "Returns a random record locator. For example: ACWNMD. Airlines commonly use this to identify reservations. Can be used as a booking reference, confirmation codes etc.",
                    "x-ms-summary": "Record Locator",
                    "x-ms-visibility": "advanced"
                  },
                  "seat": {
                    "type": "string",
                    "description": "Returns a random seat. For example: 14A. Property uses generated Aircraft Type as input for consistensy.",
                    "x-ms-summary": "Seat",
                    "x-ms-visibility": "important"
                  }
                }
              }
            }
          }
        },
        "summary": "Get airline mockdata",
        "description": "Generate aviation related data. You can use this endpoint for creating realistic mock data for flights or tickets. Returns an array of airline related properties, by default ten.",
        "operationId": "getAirlines",
        "parameters": [
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/animals": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bear": {
                    "type": "string",
                    "description": "Returns a random breed of bear. For example: Polar bear.",
                    "x-ms-summary": "Bear",
                    "x-ms-visibility": "advanced"
                  },
                  "bird": {
                    "type": "string",
                    "description": "Returns a random breed of bird. For example: Eurasian Wigeon.",
                    "x-ms-summary": "Bird",
                    "x-ms-visibility": "advanced"
                  },
                  "cat": {
                    "type": "string",
                    "description": "Returns a random breed of cat. For example: Birman.",
                    "x-ms-summary": "Cat",
                    "x-ms-visibility": "important"
                  },
                  "cetacean": {
                    "type": "string",
                    "description": "Returns a random breed of cetacean. For example: Short-Beaked Common Dolphin.",
                    "x-ms-summary": "Cetacean",
                    "x-ms-visibility": "advanced"
                  },
                  "cow": {
                    "type": "string",
                    "description": "Returns a random breed of cow. For example: Deep Red cattle.",
                    "x-ms-summary": "Cow",
                    "x-ms-visibility": "advanced"
                  },
                  "crocodilia": {
                    "type": "string",
                    "description": "Returns a random breed of crocodilia. For example: Philippine Crocodile.",
                    "x-ms-summary": "Crocodilia",
                    "x-ms-visibility": "advanced"
                  },
                  "dog": {
                    "type": "string",
                    "description": "Returns a random breed of dog. For example: Molossus of Epirus.",
                    "x-ms-summary": "Dog",
                    "x-ms-visibility": "important"
                  },
                  "fish": {
                    "type": "string",
                    "description": "Returns a random breed of fish. For example: Indian mackerel.",
                    "x-ms-summary": "Fish",
                    "x-ms-visibility": "important"
                  },
                  "horse": {
                    "type": "string",
                    "description": "Returns a random breed of horse. For example: Fleuve.",
                    "x-ms-summary": "Horse",
                    "x-ms-visibility": "advanced"
                  },
                  "insect": {
                    "type": "string",
                    "description": "Returns a random breed of insect. For example: German yellowjacket.",
                    "x-ms-summary": "Insect",
                    "x-ms-visibility": "advanced"
                  },
                  "lion": {
                    "type": "string",
                    "description": "Returns a random breed of lion. For example: Asiatic Lion.",
                    "x-ms-summary": "Lion",
                    "x-ms-visibility": "advanced"
                  },
                  "rabbit": {
                    "type": "string",
                    "description": "Returns a random breed of rabbit. For example: Flemish Giant.",
                    "x-ms-summary": "Rabbit",
                    "x-ms-visibility": "advanced"
                  },
                  "rodent": {
                    "type": "string",
                    "description": "Returns a random breed of rodent. For example: Rodent.",
                    "x-ms-summary": "Rodent",
                    "x-ms-visibility": "advanced"
                  },
                  "snake": {
                    "type": "string",
                    "description": "Returns a random breed of snake. For example: Barred wolf snake.",
                    "x-ms-summary": "Snake",
                    "x-ms-visibility": "advanced"
                  },
                  "type": {
                    "type": "string",
                    "description": "Returns a random type of animal. For example: dog.",
                    "x-ms-summary": "Type",
                    "x-ms-visibility": "important"
                  }
                }
              }
            }
          }
        },
        "summary": "Get animals mockdata",
        "description": "Generate different kinds of animal species. Returns an array of animal species, by default ten. All values may be localized.",
        "operationId": "getAnimals",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/colors": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "cmyk": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "Returns a random CMYK color decimal values.",
                    "x-ms-summary": "CMYK",
                    "x-ms-visibility": "advanced"
                  },
                  "colorByCSSColorSpace": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "Returns a random CSS color decimal values.",
                    "x-ms-summary": "Color By CSS Color Space",
                    "x-ms-visibility": "advanced"
                  },
                  "cssSupportedFunction": {
                    "type": "string",
                    "description": "Returns a random CSS supported color function name. Options are: cmyk, color, hsl, hsla, hwb, lab, lch, rgb or rgba. For example: lch.",
                    "x-ms-summary": "CSS Supported Function",
                    "x-ms-visibility": "advanced"
                  },
                  "cssSupportedSpace": {
                    "type": "string",
                    "description": "Returns a random CSS supported color space name. Options are: a98-rgb, display-p3, prophoto-rgb, rec2020, sRGB. For example: rec2020.",
                    "x-ms-summary": "CSS Supported Space",
                    "x-ms-visibility": "advanced"
                  },
                  "hsl": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "Returns a random hsl color decimal values.",
                    "x-ms-summary": "HSL",
                    "x-ms-visibility": "advanced"
                  },
                  "human": {
                    "type": "string",
                    "description": "Returns a random human readable color name. For example turquoise.",
                    "x-ms-summary": "Human readable color",
                    "x-ms-visibility": "important"
                  },
                  "hwb": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "Returns a random hwb color decimal values.",
                    "x-ms-summary": "HWB",
                    "x-ms-visibility": "advanced"
                  },
                  "lab": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "Returns a random lab color decimal values.",
                    "x-ms-summary": "LAB",
                    "x-ms-visibility": "advanced"
                  },
                  "lch": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "Returns a random lch color decimal values.",
                    "x-ms-summary": "LCH",
                    "x-ms-visibility": "advanced"
                  },
                  "rgb": {
                    "type": "string",
                    "description": "Returns a random RGB color in hex format. For example: #be7fcc.",
                    "x-ms-summary": "RGB",
                    "x-ms-visibility": "advanced"
                  },
                  "space": {
                    "type": "string",
                    "description": "Returns a random color space name. For example: CIEUVW.",
                    "x-ms-summary": "Color space",
                    "x-ms-visibility": "advanced"
                  }
                }
              }
            }
          }
        },
        "summary": "Get color mockdata",
        "description": "Generate color related data. Includes color values in different formats as well as human readable value. Returns an array of colors, by default ten. Some values may be localized.",
        "operationId": "getColors",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/companies": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "buzzAdjective": {
                    "type": "string",
                    "description": "Returns a random buzz adjective. For example: extensible.",
                    "x-ms-summary": "Buzz Adjective",
                    "x-ms-visibility": "advanced"
                  },
                  "buzzNoun": {
                    "type": "string",
                    "description": "Returns a random buzz noun. For example: initiatives.",
                    "x-ms-summary": "Buzz Noun",
                    "x-ms-visibility": "advanced"
                  },
                  "buzzPhrase": {
                    "type": "string",
                    "description": "Returns a random buzz phrase. For example: mesh clicks-and-mortar eyeballs.",
                    "x-ms-summary": "Buzz Phrase",
                    "x-ms-visibility": "advanced"
                  },
                  "buzzVerb": {
                    "type": "string",
                    "description": "Returns a random buzz verb. For example: expedite.",
                    "x-ms-summary": "Buzz Verb",
                    "x-ms-visibility": "advanced"
                  },
                  "catchPhrase": {
                    "type": "string",
                    "description": "Returns a random catch phrase. For example: Business-focused responsive moratorium.",
                    "x-ms-summary": "Catch Phrase",
                    "x-ms-visibility": "advanced"
                  },
                  "catchPhraseAdjective": {
                    "type": "string",
                    "description": "Returns a random catch phrase adjective. For example: Integrated.",
                    "x-ms-summary": "Catch Phrase Adjective",
                    "x-ms-visibility": "advanced"
                  },
                  "catchPhraseDescriptor": {
                    "type": "string",
                    "description": "Returns a random catch phrase descriptor. For example: uniform.",
                    "x-ms-summary": "Catch Phrase Descriptor",
                    "x-ms-visibility": "advanced"
                  },
                  "catchPhraseNoun": {
                    "type": "string",
                    "description": "Returns a random catch phrase noun. For example: focus group.",
                    "x-ms-summary": "Catch Phrase Noun",
                    "x-ms-visibility": "advanced"
                  },
                  "city": {
                    "type": "string",
                    "description": "Returns a random city. For example: Weissnatchester.",
                    "x-ms-summary": "City",
                    "x-ms-visibility": "important"
                  },
                  "country": {
                    "type": "string",
                    "description": "Returns a random country. For example: Saudi Arabia.",
                    "x-ms-summary": "Country",
                    "x-ms-visibility": "important"
                  },
                  "creditLimit": {
                    "type": "number",
                    "description": "Returns a random credit limit. This is a integer from 1 to 100 million. Displayed in millions. For example: 9000000.",
                    "x-ms-summary": "Credit Limit",
                    "x-ms-visibility": "advanced"
                  },
                  "email": {
                    "type": "string",
                    "description": "Returns a random email. For example: Dylan4@gmail.com.",
                    "x-ms-summary": "Email",
                    "x-ms-visibility": "advanced"
                  },
                  "mobilePhone": {
                    "type": "string",
                    "description": "Returns a random mobile phone number. For example: (337) 925-6199.",
                    "x-ms-summary": "Mobile Phone",
                    "x-ms-visibility": "advanced"
                  },
                  "name": {
                    "type": "string",
                    "description": "Returns a random name. For example: Dibbert, Kirlin and Hammes.",
                    "x-ms-summary": "Name",
                    "x-ms-visibility": "important"
                  },
                  "numberOfEmployees": {
                    "type": "integer",
                    "description": "Returns a random number of employees. This is a number between 1 and 10 000. For example: 9820.",
                    "x-ms-summary": "Number Of Employees",
                    "x-ms-visibility": "important"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Returns a random phone number. For example: (836) 964-9811.",
                    "x-ms-summary": "Phone",
                    "x-ms-visibility": "important"
                  },
                  "revenue": {
                    "type": "number",
                    "description": "Returns a random revenue. This is a integer between 1 and 100 million. Displayed in millions. For example: 8000000.",
                    "x-ms-summary": "Revenue",
                    "x-ms-visibility": "advanced"
                  },
                  "streetAddress": {
                    "type": "string",
                    "description": "Returns a random street address. For example: 78999 Zemlak Field.",
                    "x-ms-summary": "Street Address",
                    "x-ms-visibility": "important"
                  },
                  "website": {
                    "type": "string",
                    "description": "Returns a random website. For example: https://visible-derivative.com/.",
                    "x-ms-summary": "Website",
                    "x-ms-visibility": "advanced"
                  },
                  "zipCode": {
                    "type": "string",
                    "description": "Returns a random zip code. For example: 54306-5071.",
                    "x-ms-summary": "Zip Code",
                    "x-ms-visibility": "important"
                  }
                }
              }
            }
          }
        },
        "summary": "Get company mockdata",
        "description": "Generate company related data, like names and company jargon. Returns an array of properties, by default ten. Some of the properties can be localized.",
        "operationId": "getCompanies",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/databases": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "collation": {
                    "type": "string",
                    "description": "Returns a random collation.",
                    "x-ms-summary": "Collation",
                    "x-ms-visibility": "advanced"
                  },
                  "column": {
                    "type": "string",
                    "description": "Returns a random column name.",
                    "x-ms-summary": "Column",
                    "x-ms-visibility": "important"
                  },
                  "engine": {
                    "type": "string",
                    "description": "Returns a random engine.",
                    "x-ms-summary": "Engine",
                    "x-ms-visibility": "advanced"
                  },
                  "mongodbObjectId": {
                    "type": "string",
                    "description": "Returns a random MongoDB ObjectId.",
                    "x-ms-summary": "MongoDB ObjectId",
                    "x-ms-visibility": "advanced"
                  },
                  "type": {
                    "type": "string",
                    "description": "Returns a random database type.",
                    "x-ms-summary": "Type",
                    "x-ms-visibility": "important"
                  }
                }
              }
            }
          }
        },
        "summary": "Get database mockdata",
        "description": "Generate database related technical data, like columns or engines. Returns an array of properties, by default ten.",
        "operationId": "getDatabases",
        "parameters": [
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/dates": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "anytime": {
                  "type": "string",
                  "description": "Returns a random date and time. Can be in the future or in the past. For example: 2023-12-30T01:54:24.658Z.",
                  "x-ms-summary": "Date",
                  "x-ms-visibility": "important"
                },
                "birthdate": {
                  "type": "string",
                  "description": "Returns a random birthdate for an adult. For example: 1948-06-14T08:47:26.296Z.",
                  "x-ms-summary": "Birthdate",
                  "x-ms-visibility": "advanced"
                },
                "future": {
                  "type": "string",
                  "description": "Returns a random future date and time. For example: 2024-06-01T09:36:53.510Z.",
                  "x-ms-summary": "Future",
                  "x-ms-visibility": "advanced"
                },
                "month": {
                  "type": "string",
                  "description": "Returns a random month name. For example: March.",
                  "x-ms-summary": "Month",
                  "x-ms-visibility": "advanced"
                },
                "past": {
                  "type": "string",
                  "description": "Returns a random past date and time. For example: 2023-08-20T17:40:37.262Z.",
                  "x-ms-summary": "Past",
                  "x-ms-visibility": "advanced"
                },
                "recent": {
                  "type": "string",
                  "description": "Returns a random recent date and time in recent past, at most 5 days away. For example: 2024-01-02T03:09:38.383Z.",
                  "x-ms-summary": "Recent",
                  "x-ms-visibility": "important"
                },
                "soon": {
                  "type": "string",
                  "description": "Returns a random date and time in the near future, at most 5 days away. For example: 2024-01-03T11:00:08.493Z.",
                  "x-ms-summary": "Soon",
                  "x-ms-visibility": "important"
                },
                "weekday": {
                  "type": "string",
                  "description": "Returns a random weekday name. For example: Friday.",
                  "x-ms-summary": "Weekday"
                },
                "year": {
                  "type": "number",
                  "description": "Returns a random year between 1900 and 2100. For example: 2083.",
                  "x-ms-summary": "Year",
                  "x-ms-visibility": "advanced"
                }
              }
            }
          }
        },
        "summary": "Get date mockdata",
        "description": "Generate datetime data. While seed usage is available, note that most of the properties depend on the time the enpoint is requested, rather than a spesific seed value. Returns an array of properties, by default ten. All dates are returned as ISO-8601 datetime strings. Month and weekday might be localized.",
        "operationId": "getDates",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/finances": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "accountName": {
                    "type": "string",
                    "description": "Returns a random account name. For example: Savings Account.",
                    "x-ms-summary": "Account Name",
                    "x-ms-visibility": "important"
                  },
                  "accountNumber": {
                    "type": "string",
                    "description": "Returns a random account number in local format. For example: 54296344.",
                    "x-ms-summary": "Account Type",
                    "x-ms-visibility": "advanced"
                  },
                  "amount": {
                    "type": "number",
                    "description": "Returns a random amount for a transaction. Value has two decimal places. For example: 540.29.",
                    "x-ms-summary": "Amount",
                    "x-ms-visibility": "important"
                  },
                  "bic": {
                    "type": "string",
                    "description": "Returns a random BIC (Bank Identifier Code). For example: OSCTPNT6A96.",
                    "x-ms-summary": "BIC",
                    "x-ms-visibility": "advanced"
                  },
                  "bitcoinAddress": {
                    "type": "string",
                    "description": "Returns a random Bitcoin address. For example: 36ks9VMpLaFeWbR8hu1Uuz4zgbUid4XWvn.",
                    "x-ms-summary": "Bitcoin Address",
                    "x-ms-visibility": "advanced"
                  },
                  "creditCardCVV": {
                    "type": "string",
                    "description": "Returns a random Credit Card CVV. For example: 400.",
                    "x-ms-summary": "Credit Card CVV",
                    "x-ms-visibility": "advanced"
                  },
                  "creditCardIssuer": {
                    "type": "string",
                    "description": "Returns a random Credit Card Issuer. For example: visa.",
                    "x-ms-summary": "Credit Card Issuer",
                    "x-ms-visibility": "advanced"
                  },
                  "creditCardNumber": {
                    "type": "string",
                    "description": "Returns a random Credit Card Number from the issuer from the issuer property. For example: 4584186609458.",
                    "x-ms-summary": "Credit Card Number",
                    "x-ms-visibility": "advanced"
                  },
                  "currencyCode": {
                    "type": "string",
                    "description": "Returns a random Currency Code. Currency Code, Currency Name and Currency Symmbol are from them same currency. For example: TRY.",
                    "x-ms-summary": "Currency Code",
                    "x-ms-visibility": "important"
                  },
                  "currencyName": {
                    "type": "string",
                    "description": "Returns a random Currency Name. Currency Code, Currency Name and Currency Symmbol are from them same currency. For example: Turkish Lira.",
                    "x-ms-summary": "Currency Name",
                    "x-ms-visibility": "advanced"
                  },
                  "currencySymbol": {
                    "type": "string",
                    "description": "Returns a random Currency Symbol. Currency Code, Currency Name and Currency Symmbol are from them same currency. For example: ₺.",
                    "x-ms-summary": "Currency Symbol",
                    "x-ms-visibility": "advanced"
                  },
                  "ethereumAddress": {
                    "type": "string",
                    "description": "Returns a random Ethereum Address. For example: 0x83a44fb302d6d7a68fcdac2b2efdfc3e0ea53c2a.",
                    "x-ms-summary": "Ethereum Address",
                    "x-ms-visibility": "advanced"
                  },
                  "iban": {
                    "type": "string",
                    "description": "Returns a random IBAN (International Bank Account Number). For example: GL3144820110800764.",
                    "x-ms-summary": "IBAN",
                    "x-ms-visibility": "important"
                  },
                  "litecoinAddress": {
                    "type": "string",
                    "description": "Returns a random Litecoin Address. For example: Ljo4LU3FMxfVyVF7sTVvDzfBhp.",
                    "x-ms-summary": "Litecoin Address",
                    "x-ms-visibility": "advanced"
                  },
                  "maskedNumber": {
                    "type": "string",
                    "description": "Returns a random Masked Number. For example: (…0859).",
                    "x-ms-summary": "Masked Number",
                    "x-ms-visibility": "advanced"
                  },
                  "pin": {
                    "type": "string",
                    "description": "Returns a random PIN (Personal Identification Number). For example: 1309.",
                    "x-ms-summary": "PIN",
                    "x-ms-visibility": "advanced"
                  },
                  "routingNumber": {
                    "type": "string",
                    "description": "Returns a random Routing Number. For example: 164294325.",
                    "x-ms-summary": "Routing Number",
                    "x-ms-visibility": "advanced"
                  },
                  "transactionDescription": {
                    "type": "string",
                    "description": "Returns a random Transaction Description. For example: deposit transaction at Reinger, Hamill and Gutmann using card ending with ***(...3677) for TJS 820.80 in account ***44178655.",
                    "x-ms-summary": "Transaction Description",
                    "x-ms-visibility": "advanced"
                  },
                  "transactionType": {
                    "type": "string",
                    "description": "Returns a random Transaction Type. For example: payment.",
                    "x-ms-summary": "Transaction Type",
                    "x-ms-visibility": "important"
                  }
                }
              }
            }
          }
        },
        "summary": "Get finance mockdata",
        "description": "Generate finance related data, like credit card information, account information and so on. Returns an array of properties, by default ten. Some properties might be localized.",
        "operationId": "getFinances",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/gits": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "branch": {
                    "type": "string",
                    "description": "Returns the branch name of the commit. For example: interface-compress.",
                    "x-ms-summary": "Branch",
                    "x-ms-visibility": "advanced"
                  },
                  "commitDate": {
                    "type": "string",
                    "description": "Returns the date and time of the commit. Formatting is the same as in git log. For example: Tue Jan 2 18:12:21 2024 +0300.",
                    "x-ms-summary": "Commit Date",
                    "x-ms-visibility": "advanced"
                  },
                  "commitEntry": {
                    "type": "string",
                    "description": "Returns the full commit entry, including the commit SHA, author, date, and message.",
                    "x-ms-summary": "Commit Entry",
                    "x-ms-visibility": "advanced"
                  },
                  "commitMessage": {
                    "type": "string",
                    "description": "Returns the commit message. For example: compress open-source array.",
                    "x-ms-summary": "Commit Message",
                    "x-ms-visibility": "important"
                  },
                  "commitSha": {
                    "type": "string",
                    "description": "Returns the SHA of the commit. For example: b5daadecfa08c22c5fea7ba3c0fdc5bdff4bab87.",
                    "x-ms-summary": "Commit SHA",
                    "x-ms-visibility": "advanced"
                  }
                }
              }
            }
          }
        },
        "summary": "Get git mockdata",
        "description": "Generate git related data. Returns an array of properties, by default ten.",
        "operationId": "getGits",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/hackers": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "abbreviation": {
                  "type": "string",
                  "description": "Returns an abbreviation from technologies. For example: XSS.",
                  "x-ms-summary": "Abbreviation",
                  "x-ms-visibility": "advanced"
                },
                "adjective": {
                  "type": "string",
                  "description": "Returns a hacker or technology related adjective. For example: 1080p.",
                  "x-ms-summary": "Adjective",
                  "x-ms-visibility": "advanced"
                },
                "ingverb": {
                  "type": "string",
                  "description": "Returns a verb ending in -ing. For example: quantifying.",
                  "x-ms-summary": "Verb ending with -ing",
                  "x-ms-visibility": "advanced"
                },
                "noun": {
                  "type": "string",
                  "description": "Returns a hacker or technology related noun. For example: card.",
                  "x-ms-summary": "Noun",
                  "x-ms-visibility": "advanced"
                },
                "phrase": {
                  "type": "string",
                  "description": "Returns a hacker or technology related phrase. For example: I'll connect the open-source RSS interface, that should circuit the VGA transmitter!.",
                  "x-ms-summary": "Phrase",
                  "x-ms-visibility": "important"
                },
                "verb": {
                  "type": "string",
                  "description": "Returns a hacker or technology related verb. For example: override.",
                  "x-ms-summary": "Verb",
                  "x-ms-visibility": "advanced"
                }
              }
            }
          }
        },
        "summary": "Get hacker mockdata",
        "description": "Generate hacker or IT related buzzwords. Returns an array of properties, by default ten. Some properties might be localized.",
        "operationId": "getHackers",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/images": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Returns an image name.",
                    "x-ms-summary": "Image Name",
                    "x-ms-visibility": "important"
                  },
                  "url": {
                    "type": "string",
                    "description": "Returns an image url.",
                    "x-ms-summary": "Image Url",
                    "x-ms-visibility": "important"
                  }
                }
              }
            }
          }
        },
        "summary": "Get random images",
        "operationId": "getRandomImages",
        "parameters": [
          {
            "$ref": "#/parameters/count"
          },
          {
            "name": "width",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Width",
            "x-ms-visibility": "advanced",
            "description": "Define the width of the image. Default is 640."
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-ms-summary": "Height",
            "x-ms-visibility": "advanced",
            "description": "Define the height of the image. Default is 480."
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "type": "string",
            "x-ms-summary": "Category",
            "x-ms-visibility": "important",
            "description": "Define the category of the image. Default is blank and returns an image from a random category.",
            "enum": [
              "abstract",
              "animals",
              "business",
              "cats",
              "city",
              "food",
              "nightlife",
              "fashion",
              "people",
              "nature",
              "sports",
              "technics",
              "transport"
            ]
          }
        ]
      }
    },
    "/internets": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "object",
              "properties": {
                "color": {
                  "type": "string",
                  "description": "Returns a random color code in hex format. For example: #511134.",
                  "x-ms-summary": "Color",
                  "x-ms-visibility": "advanced"
                },
                "displayName": {
                  "type": "string",
                  "description": "Returns a display name for a given user. All user related properties use the same first and lastname as a base. For example: Ted.Runolfsson48.",
                  "x-ms-summary": "Display Name",
                  "x-ms-visibility": "important"
                },
                "domainName": {
                  "type": "string",
                  "description": "Returns a random domain name. For example: clear-operating.info.",
                  "x-ms-summary": "Domain Name",
                  "x-ms-visibility": "important"
                },
                "domainSuffix": {
                  "type": "string",
                  "description": "Returns a domain suffix. For example: net.",
                  "x-ms-summary": "Domain Suffix",
                  "x-ms-visibility": "advanced"
                },
                "domainWord": {
                  "type": "string",
                  "description": "Returns a random word to be used in a domain. For example: sparkling-bather.",
                  "x-ms-summary": "Domain Word",
                  "x-ms-visibility": "advanced"
                },
                "email": {
                  "type": "string",
                  "description": "Returns an email address. For example: Ted_Runolfsson10@yahoo.com.",
                  "x-ms-summary": "Email",
                  "x-ms-visibility": "advanced"
                },
                "emoji": {
                  "type": "string",
                  "description": "Returns a random emoji. For example: 😺.",
                  "x-ms-summary": "Emoji",
                  "x-ms-visibility": "advanced"
                },
                "exampleEmail": {
                  "type": "string",
                  "description": "Returns an example email address. All user related properties use the same first and lastname as a base. For example: Ted_Runolfsson88@example.net.",
                  "x-ms-summary": "Example Email"
                },
                "httpMethod": {
                  "type": "string",
                  "description": "Returns a HTTP method. For example: PUT.",
                  "x-ms-summary": "HTTP Method",
                  "x-ms-visibility": "advanced"
                },
                "httpStatusCode": {
                  "type": "integer",
                  "description": "Returns a HTTP status code. For example: 103.",
                  "x-ms-summary": "HTTP Status Code",
                  "x-ms-visibility": "advanced"
                },
                "ip": {
                  "type": "string",
                  "description": "Returns a random IPv4 or IPv6 address. For example: b8bb:21ac:da45:baf2:fe1c:7e62:7f2c:c6dc.",
                  "x-ms-summary": "IP Address",
                  "x-ms-visibility": "advanced"
                },
                "ipv4": {
                  "type": "string",
                  "description": "Returns an IPv4 address. For example: 146.120.42.165.",
                  "x-ms-summary": "IPv4 Address",
                  "x-ms-visibility": "advanced"
                },
                "ipv6": {
                  "type": "string",
                  "description": "Returns an IPv6 address. For example: 1eff:77af:b6d3:ae02:8e0d:1d7d:feb2:7a01.",
                  "x-ms-summary": "IPv6 Address",
                  "x-ms-visibility": "advanced"
                },
                "mac": {
                  "type": "string",
                  "description": "Returns a MAC address. For example: c8:14:d0:db:1e:d4.",
                  "x-ms-summary": "MAC Address",
                  "x-ms-visibility": "advanced"
                },
                "password": {
                  "type": "string",
                  "description": "Returns a random string to be used as a password. For example: eqv2uVVHsXkWcRs.",
                  "x-ms-summary": "Password",
                  "x-ms-visibility": "advanced"
                },
                "port": {
                  "type": "integer",
                  "description": "Returns a random port number. For example: 5071.",
                  "x-ms-summary": "Port Number",
                  "x-ms-visibility": "advanced"
                },
                "protocol": {
                  "type": "string",
                  "description": "Returns a protocol. For example: https.",
                  "x-ms-summary": "Protocol",
                  "x-ms-visibility": "advanced"
                },
                "url": {
                  "type": "string",
                  "description": "Returns a random URL. For example: https://immaculate-debtor.biz.",
                  "x-ms-summary": "URL",
                  "x-ms-visibility": "advanced"
                },
                "userAgent": {
                  "type": "string",
                  "description": "Returns a random user agent. For example: Mozilla/5.0 (X11; Linux x86_64 AppleWebKit/532.2.0 (KHTML, like Gecko) Chrome/18.0.884.0 Safari/532.2.0.",
                  "x-ms-summary": "User Agent",
                  "x-ms-visibility": "advanced"
                },
                "userName": {
                  "type": "string",
                  "description": "Returns a user name. All user related properties use the same first and lastname as a base. For example: Ted42.",
                  "x-ms-summary": "Username",
                  "x-ms-visibility": "important"
                }
              }
            }
          }
        },
        "summary": "Get internet mockdata",
        "description": "Get rich data about things in the internet like users or networking terms. Returns an array of objects with different internet properties.",
        "operationId": "getInternet",
        "parameters": [
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/locations": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "buildingNumber": {
                    "type": "string",
                    "description": "Returns a building number. For example: 79502.",
                    "x-ms-summary": "Building Number"
                  },
                  "cardinalDirection": {
                    "type": "string",
                    "description": "Returns a cardinal direction. For example: South.",
                    "x-ms-summary": "Cardinal Direction"
                  },
                  "city": {
                    "type": "string",
                    "description": "Returns a city name. For example: Devantestead.",
                    "x-ms-summary": "City"
                  },
                  "country": {
                    "type": "string",
                    "description": "Returns a country name. For example: Faroe Islands.",
                    "x-ms-summary": "Country"
                  },
                  "countryCode": {
                    "type": "string",
                    "description": "Returns a country code. For example: PE.",
                    "x-ms-summary": "Country Code"
                  },
                  "county": {
                    "type": "string",
                    "description": "Returns a county name. For example: Avon.",
                    "x-ms-summary": "County"
                  },
                  "direction": {
                    "type": "string",
                    "description": "Returns a direction. For example: Southeast.",
                    "x-ms-summary": "Direction"
                  },
                  "latitude": {
                    "type": "number",
                    "description": "Returns a latitude coordinate. For example: -21.109.",
                    "x-ms-summary": "Latitude"
                  },
                  "longitude": {
                    "type": "number",
                    "description": "Returns a longitude coordinate. For example: -60.2472.",
                    "x-ms-summary": "Longitude"
                  },
                  "ordinalDirection": {
                    "type": "string",
                    "description": "Returns an ordinal direction. For example: Northwest.",
                    "x-ms-summary": "Ordinal Direction"
                  },
                  "secondaryAddress": {
                    "type": "string",
                    "description": "Returns a secondary address. For example: Suite 719.",
                    "x-ms-summary": "Secondary Address"
                  },
                  "state": {
                    "type": "string",
                    "description": "Returns a state name. For example: Kansas.",
                    "x-ms-summary": "State"
                  },
                  "street": {
                    "type": "string",
                    "description": "Returns a street name. For example: Willow Street.",
                    "x-ms-summary": "Street"
                  },
                  "streetAddress": {
                    "type": "string",
                    "description": "Returns a street address. For example: 7619 Damaris Junctions.",
                    "x-ms-summary": "Street Address"
                  },
                  "timeZone": {
                    "type": "string",
                    "description": "Returns a time zone. For example: Pacific/Funafuti.",
                    "x-ms-summary": "Time Zone"
                  },
                  "zipCode": {
                    "type": "string",
                    "description": "Returns a zip code. For example: 38467.",
                    "x-ms-summary": "Zip Code"
                  }
                }
              }
            }
          }
        },
        "summary": "Get location mockdata",
        "description": "Generate location related data. Returns an array of properties, by default ten.",
        "operationId": "getLocations",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/lorems": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "lines": {
                    "type": "string",
                    "description": "Returns a set of lines. For example: Vorax contigo convoco.\nBeatae comparo animadverto conicio iste.\nUterque succedo attonbitus sordeo est clementia.\nEnim conicio quam praesentium curto adflicto audax..",
                    "x-ms-summary": "Lines"
                  },
                  "paragraph": {
                    "type": "string",
                    "description": "Returns a paragraph. For example: Est tubineus sponte conor nam ipsam optio. Amet volaticus demitto. Et angelus alii demonstro iure..",
                    "x-ms-summary": "Paragraph"
                  },
                  "paragraphs": {
                    "type": "string",
                    "description": "Returns multiple paragraphs. For example: Theca adamo video supplanto. Voluptates conturbo creator bellicus aut vir adinventitias altus cupiditate canto. Curo decumbo adipiscor inflammatio sponte cornu aegrotatio sopor capio calcar.\nBibo audeo adipisci beatae ustilo ambulo. Derelinquo desolo spectaculum inventore derelinquo asper carcer caries. Clementia pauper apto armarium.\nDedecor vis tui averto vorax praesentium tantillus catena adhaero adsidue. Decimus vitium aequitas veritas auctor adinventitias desparatus. Defetiscor vicissitudo absum delinquo amplexus acsi sed uter depopulo utor..",
                    "x-ms-summary": "Paragraphs"
                  },
                  "sentence": {
                    "type": "string",
                    "description": "Returns a sentence. For example: Provident supra custodia aegrotatio..",
                    "x-ms-summary": "Sentence"
                  },
                  "sentences": {
                    "type": "string",
                    "description": "Returns multiple sentences. For example: Terminatio cubo voco trado amaritudo delectus. Beatus attollo arbitro desparatus una angelus vesper. Provident voluntarius capitulus universe compono. Conscendo animadverto apto aegrotatio. Ut virgo turbo sol viscus quam..",
                    "x-ms-summary": "Sentences"
                  },
                  "slug": {
                    "type": "string",
                    "description": "Returns a slug. For example: patria-numquam-arbor.",
                    "x-ms-summary": "Slug"
                  },
                  "text": {
                    "type": "string",
                    "description": "Returns a text. For example: Sum laudantium totam utrum victus sunt paens demergo cervus vulgivagus.\nVentus clarus cotidie conduco sollicito degero carmen turbo combibo.\nTandem vulpes villa tribuo doloremque tergeo..",
                    "x-ms-summary": "Text"
                  },
                  "word": {
                    "type": "string",
                    "description": "Returns a word. For example: circumvenio.",
                    "x-ms-summary": "Word"
                  },
                  "words": {
                    "type": "string",
                    "description": "Returns multiple words. For example: toties ter colligo.",
                    "x-ms-summary": "Words"
                  }
                }
              }
            }
          }
        },
        "summary": "Get Lorem Ipsum mockdata",
        "description": "Generate lorem ipsum. Returns an array of properties, by default ten.",
        "operationId": "getMusics",
        "parameters": [
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ]
      }
    },
    "/musics": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type":"object",
                "properties":{
                  "genre": {
                    "type": "string",
                    "description": "Returns a random genre.",
                    "x-ms-summary": "Genre"
                  },
                  "songName": {
                    "type": "string",
                    "description": "Returns a random song name.",
                    "x-ms-summary": "Song name"
                  }
                }
              }
            }
          }
        },
        "summary": "Get music mockdata",
        "description": "Get rich data about music. Returns an object with different music properties.",
        "operationId": "getMusics",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          }
        ]
      }
    },
    "/numbers": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type":"object",
                "properties":{
                  "bigint": {
                    "type": "number",
                    "description": "Returns a random genre.",
                    "x-ms-summary": "Big Int"
                  },
                  "binary": {
                    "type": "string",
                    "description": "Returns a random song name.",
                    "x-ms-summary": "Binary"
                  },
                  "float": {
                    "type": "number",
                    "description": "Returns a random genre.",
                    "x-ms-summary": "Float"
                  },
                  "hex": {
                    "type": "string",
                    "description": "Returns a random song name.",
                    "x-ms-summary": "Hex"
                  },
                  "int": {
                    "type": "number",
                    "description": "Returns a random genre.",
                    "x-ms-summary": "Int"
                  },
                  "octal": {
                    "type": "string",
                    "description": "Returns a random song name.",
                    "x-ms-summary": "Octal"
                  }
                }
              }
            }
          }
        },
        "summary": "Get numeric mockdata",
        "description": "Get rich data with all kinds of numbers. Returns an object with different number properties.",
        "operationId": "getNumbers",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          }
        ]
      }
    },
    "/persons": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "bio": {
                    "type": "string",
                    "description": "Returns a random short biography",
                    "x-ms-summary": "Bio"
                  },
                  "birthday": {
                    "type": "string",
                    "description": "Returns a random birthday as ISO 8601 date string.",
                    "x-ms-summary": "Birthday"
                  },
                  "businessPhone": {
                    "type": "string",
                    "description": "Returns a random business phone number.",
                    "x-ms-summary": "Business Phone"
                  },
                  "city": {
                    "type": "string",
                    "description": "Returns a random city name.",
                    "x-ms-summary": "City"
                  },
                  "country": {
                    "type": "string",
                    "description": "Returns a random country name.",
                    "x-ms-summary": "Country"
                  },
                  "creditLimit": {
                    "type": "number",
                    "description": "Returns a random credit limit.",
                    "x-ms-summary": "Credit Limit"
                  },
                  "department": {
                    "type": "string",
                    "description": "Returns a random department.",
                    "x-ms-summary": "Department"
                  },
                  "description": {
                    "type": "string",
                    "description": "Returns a random description.",
                    "x-ms-summary": "Description"
                  },
                  "email": {
                    "type": "string",
                    "description": "Returns a random email address.",
                    "x-ms-summary": "Email"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "Returns a random first name.",
                    "x-ms-summary": "First Name"
                  },
                  "fullName": {
                    "type": "string",
                    "description": "Generates a random full name.",
                    "x-ms-summary": "Full Name"
                  },
                  "gender": {
                    "type": "string",
                    "description": "Returns a random gender.",
                    "x-ms-summary": "Gender"
                  },
                  "jobArea": {
                    "type": "string",
                    "description": "Generates a random job area.",
                    "x-ms-summary": "Job Area"
                  },
                  "jobDescriptor": {
                    "type": "string",
                    "description": "Generates a random job descriptor.",
                    "x-ms-summary": "Job Descriptor"
                  },
                  "jobx-ms-summary": {
                    "type": "string",
                    "description": "Generates a random job x-ms-summary.",
                    "x-ms-summary": "Job x-ms-summary"
                  },
                  "jobType": {
                    "type": "string",
                    "description": "Generates a random job type.",
                    "x-ms-summary": "Job Type"
                  },
                  "prefix": {
                    "type": "string",
                    "description": "Generates a random prefix.",
                    "x-ms-summary": "Prefix"
                  },
                  "mobilePhone": {
                    "type": "string",
                    "description": "Returns a random mobile phone number.",
                    "x-ms-summary": "Mobile Phone"
                  },
                  "lastname": {
                    "type": "string",
                    "description": "Generates a random last name.",
                    "x-ms-summary": "Last Name"
                  },
                  "salutation": {
                    "type": "string",
                    "description": "Generates a random salutation.",
                    "x-ms-summary": "Salutation"
                  },
                  "sexType": {
                    "type": "string",
                    "description": "Generates a random sex type.",
                    "x-ms-summary": "Sex Type"
                  },
                  "streetAddress": {
                    "type": "string",
                    "description": "Returns a random street address.",
                    "x-ms-summary": "Street Address"
                  },
                  "suffix": {
                    "type": "string",
                    "description": "Generates a random suffix.",
                    "x-ms-summary": "Suffix"
                  },
                  "zipCode": {
                    "type": "string",
                    "description": "Returns a random zip code.",
                    "x-ms-summary": "Zip Code"
                  },
                  "zodiacSign": {
                    "type": "string",
                    "description": "Generates a random zodiac sign.",
                    "x-ms-summary": "Zodiac Sign"
                  }
                }
              }
            }
          }
        },
        "summary": "Get people",
        "description": "Get rich people mockup data. Returns an array of people with additional usefull properties, by default ten.",
        "operationId": "getPeople",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          }
        ]
      }
    },
    "/phones": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type":"object",
                "properties":{
                  "imei": {
                    "type": "string",
                    "description": "Returns a random imei.",
                    "x-ms-summary": "IMEI"
                  },
                  "number": {
                    "type": "string",
                    "description": "Returns a random phone number in international format.",
                    "x-ms-summary": "Phone number"
                  }
                }
              }
            }
          }
        },
        "summary": "Get phone mockdata",
        "description": "Get rich data about phones. Returns an object with different phone related properties.",
        "operationId": "getPhones",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          }
        ]
      }
    },
    "/products": {
      "get": {
        "responses": {
          "200": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "department": {
                    "type": "string",
                    "description": "Returns a random department.",
                    "x-ms-summary": "Department"
                  },
                  "isbn": {
                    "type": "string",
                    "description": "Returns a random ISBN number.",
                    "x-ms-summary": "ISBN"
                  },
                  "price": {
                    "type": "number",
                    "description": "Returns a random price.",
                    "x-ms-summary": "Price"
                  },
                  "product": {
                    "type": "string",
                    "description": "Returns a random short product name.",
                    "x-ms-summary": "Short product name"
                  },
                  "productAdjective": {
                    "type": "string",
                    "description": "Returns a random product adjective.",
                    "x-ms-summary": "Product Adjective"
                  },
                  "productDescription": {
                    "type": "string",
                    "description": "Returns a random product description.",
                    "x-ms-summary": "Product Description"
                  },
                  "productMaterial": {
                    "type": "string",
                    "description": "Returns a random product material.",
                    "x-ms-summary": "Product Material"
                  },
                  "productName": {
                    "type": "string",
                    "description": "Returns a random descriptive product name.",
                    "x-ms-summary": "Product Name"
                  }
                }
              }
            }
          }
        },
        "summary": "Get product mockdata",
        "description": "Get rich data about products. Returns an array, by default ten.",
        "operationId": "getProducts",
        "parameters": [
          {
            "$ref": "#/parameters/availableLocales"
          },
          {
            "$ref": "#/parameters/count"
          }
        ]
      }
    },
    "/sciences": {
      "get": {
        "responses": {
          "200": {
            "description":"default",
            "schema":{
              "type":"array",
              "items":{
                "type":"object",
                "properties":{
                  "chemicalElement": {
                    "type": "string",
                    "description": "Returns a random chemical element.",
                    "x-ms-summary": "Chemical Element"
                  },
                  "unit": {
                    "type":"string",
                    "description":"Returns a random unit.",
                    "x-ms-summary":"Unit"
                  }
                }
              }
            }
          }
        },
        "summary": "Get science mockdata",
        "description": "Get rich data about science. Returns an object with different science properties.",
        "operationId": "getSciences",
        "parameters": [
          {
            "$ref":"#/parameters/availableLocales"
          },
          {
            "$ref":"#/parameters/count"
          }
        ]
      }
    },
    "/strings": {
      "get": {
        "responses": {
          "200": {
            "description":"default",
            "schema":{
              "type":"array",
              "items":{
                "type":"object",
                "properties":{
                  "alpha": {
                    "type": "string",
                    "description": "Returns a random alpha string.",
                    "x-ms-summary": "Alpha"
                  },
                  "alphanumeric": {
                    "type": "string",
                    "description": "Returns a random alphanumeric string.",
                    "x-ms-summary": "Alphanumeric"
                  },
                  "binary":{
                    "type":"string",
                    "description":"Returns a random binary string.",
                    "x-ms-summary":"Binary"
                  },
                  "hexadecimal":{
                    "type":"string",
                    "description":"Returns a random hexadecimal string.",
                    "x-ms-summary":"Hexadecimal"
                  },
                  "nanoid":{
                    "type":"string",
                    "description":"Returns a random nanoid string.",
                    "x-ms-summary":"Nanoid"
                  },
                  "numeric":{
                    "type":"string",
                    "description":"Returns a random numeric string.",
                    "x-ms-summary":"Numeric"
                  },
                  "octal":{
                    "type":"string",
                    "description":"Returns a random octal string.",
                    "x-ms-summary":"Octal"
                  },
                  "sample":{
                    "type":"string",
                    "description":"Returns a random sample string.",
                    "x-ms-summary":"Sample"
                  },
                  "symbol":{
                    "type":"string",
                    "description":"Returns a random symbol string.",
                    "x-ms-summary":"Symbol"
                  },
                  "uuid":{
                    "type":"string",
                    "description":"Returns a random uuid string.",
                    "x-ms-summary":"UUID"
                  }
                }
              }
            }
          }
        },
        "summary": "Get string mockdata",
        "description": "Get different kinds of strings. Returns an object with different string properties.",
        "operationId": "getStrings",
        "parameters": [
          {
            "$ref":"#/parameters/availableLocales"
          },
          {
            "$ref":"#/parameters/count"
          }
        ]
      }
    },
    "/systems": {
      "get": {
        "responses": {
          "200": {
            "description":"default",
            "schema":{
              "type":"array",
              "items":{
                "type":"object",
                "properties":{
                  "commonFileExt": {
                    "type": "string",
                    "description": "Returns a random common file extension.",
                    "x-ms-summary": "Common File Extension"
                  },
                  "commonFileName": {
                    "type": "string",
                    "description": "Returns a random common file name.",
                    "x-ms-summary": "Common File Name"
                  },
                  "commonFileType": {
                    "type": "string",
                    "description": "Returns a random common file type.",
                    "x-ms-summary": "Common File Type"
                  },
                  "cron": {
                    "type": "string",
                    "description": "Returns a random cron expression.",
                    "x-ms-summary": "Cron"
                  },
                  "directoryPath": {
                    "type": "string",
                    "description": "Returns a random directory path.",
                    "x-ms-summary": "Directory Path"
                  },
                  "fileExt": {
                    "type": "string",
                    "description": "Returns a random file extension.",
                    "x-ms-summary": "File Extension"
                  },
                  "fileName": {
                    "type": "string",
                    "description": "Returns a random file name.",
                    "x-ms-summary": "File Name"
                  },
                  "filePath": {
                    "type": "string",
                    "description": "Returns a random file path.",
                    "x-ms-summary": "File Path"
                  },
                  "fileType": {
                    "type": "string",
                    "description": "Returns a random file type.",
                    "x-ms-summary": "File Type"
                  },
                  "mimeType": {
                    "type": "string",
                    "description": "Returns a random mime type.",
                    "x-ms-summary": "Mime Type"
                  },
                  "networkInterface": {
                    "type": "string",
                    "description": "Returns a random network interface.",
                    "x-ms-summary": "Network Interface"
                  },
                  "semver": {
                    "type": "string",
                    "description": "Returns a random semantic version.",
                    "x-ms-summary": "Semantic Version"
                  }
                }
              }
            }
          }
        },
        "summary": "Get system mockdata",
        "description": "Get rich data about systems. Returns an object with different system properties.",
        "operationId": "getSystems",
        "parameters": [
          {
            "$ref":"#/parameters/availableLocales"
          },
          {
            "$ref":"#/parameters/count"
          }
        ]
      }
    },
    "/vehicles": {
      "get": {
        "responses": {
          "200": {
            "description":"default",
            "schema":{
              "type":"array",
              "items":{
                "type":"object",
                "properties":{
                  "bicycle": {
                    "type":"string",
                    "description":"Returns a random bicycle.",
                    "x-ms-summary":"Bicycle"
                  },
                  "color":{
                    "type":"string",
                    "description":"Returns a random color.",
                    "x-ms-summary":"Color"
                  },
                  "fuel":{
                    "type":"string",
                    "description":"Returns a random fuel.",
                    "x-ms-summary":"Fuel"
                  },
                  "manufacturer":{
                    "type":"string",
                    "description":"Returns a random manufacturer.",
                    "x-ms-summary":"Manufacturer"
                  },
                  "model":{
                    "type":"string",
                    "description":"Returns a random model.",
                    "x-ms-summary":"Model"
                  },
                  "type":{
                    "type":"string",
                    "description":"Returns a random type.",
                    "x-ms-summary":"Type"
                  },
                  "vehicle":{
                    "type":"string",
                    "description":"Returns a random vehicle.",
                    "x-ms-summary":"Vehicle"
                  },
                  "vin":{
                    "type":"string",
                    "description":"Returns a random vin.",
                    "x-ms-summary":"VIN"
                  },
                  "vrm":{
                    "type":"string",
                    "description":"Returns a random vrm.",
                    "x-ms-summary":"VRM"
                  }
                }
              }
            }
          }
        },
        "summary": "Get vehicle mockdata",
        "description": "Get rich data about vehicles. Returns an object with different vehicle properties.",
        "operationId": "getVehicles",
        "parameters": [
          {
            "$ref":"#/parameters/availableLocales"
          },
          {
            "$ref":"#/parameters/count"
          }
        ]
      }
    },
    "/words": {
      "get": {
        "responses": {
          "200": {
            "description":"default",
            "schema":{
              "type":"array",
              "items":{
                "type":"object",
                "properties":{
                  "adjective":{
                    "type":"string",
                    "description":"Returns a random adjective.",
                    "x-ms-summary":"Adjective"
                  },
                  "adverb":{
                    "type":"string",
                    "description":"Returns a random adverb.",
                    "x-ms-summary":"Adverb"
                  },
                  "conjunction":{
                    "type":"string",
                    "description":"Returns a random conjunction.",
                    "x-ms-summary":"Conjunction"
                  },
                  "interjection":{
                    "type":"string",
                    "description":"Returns a random interjection.",
                    "x-ms-summary":"Interjection"
                  },
                  "noun":{
                    "type":"string",
                    "description":"Returns a random noun.",
                    "x-ms-summary":"Noun"
                  },
                  "preposition":{
                    "type":"string",
                    "description":"Returns a random preposition.",
                    "x-ms-summary":"Preposition"
                  },
                  "sample":{
                    "type":"string",
                    "description":"Returns a random sample.",
                    "x-ms-summary":"Sample"
                  },
                  "verb":{
                    "type":"string",
                    "description":"Returns a random verb.",
                    "x-ms-summary":"Verb"
                  },
                  "words":{
                    "type":"string",
                    "description":"Returns random words.",
                    "x-ms-summary":"Words"
                  }
                }
              }
            }
          }
        },
        "summary": "Get word mockdata",
        "description": "Get rich data about words. Returns an object with different word properties.",
        "operationId": "getWords",
        "parameters": [
          {
            "$ref":"#/parameters/availableLocales"
          },
          {
            "$ref":"#/parameters/count"
          }
        ]
      }
    }       
  },
  
  
  "definitions": {},
  "parameters": {
    "availableLocales": {
      "name": "availableLocales",
      "in": "query",
      "required": false,
      "type": "string",
      "x-ms-summary": "Locale",
      "x-ms-visibility": "advanced",
      "enum": [
        "af_ZA",
        "ar",
        "az",
        "base",
        "cs_CZ",
        "da",
        "de",
        "de_AT",
        "de_CH",
        "dv",
        "el",
        "en",
        "en_AU",
        "en_AU_ocker",
        "en_BORK",
        "en_CA",
        "en_GB",
        "en_GH",
        "en_HK",
        "en_IE",
        "en_IN",
        "en_NG",
        "en_US",
        "en_ZA",
        "eo",
        "es",
        "es_MX",
        "fa",
        "fi",
        "fr",
        "fr_BE",
        "fr_CA",
        "fr_CH",
        "fr_LU",
        "fr_SN",
        "he",
        "hr",
        "hu",
        "hy",
        "id_ID",
        "it",
        "ja",
        "ka_GE",
        "ko",
        "lv",
        "mk",
        "nb_NO",
        "ne",
        "nl",
        "nl_BE",
        "pl",
        "pt_BR",
        "pt_PT",
        "ro",
        "ro_MD",
        "ru",
        "sk",
        "sr_RS_latin",
        "sv",
        "th",
        "tr",
        "uk",
        "ur",
        "vi",
        "yo_NG",
        "zh_CN",
        "zh_TW",
        "zu_ZA"
      ],
      "x-ms-enum-values": [
        {
          "value": "af_ZA",
          "displayName": "Afrikaans (South Africa)"
        },
        {
          "value": "ar",
          "displayName": "Arabic"
        },
        {
          "value": "hy",
          "displayName": "Armenian"
        },
        {
          "value": "az",
          "displayName": "Azerbaijani"
        },
        {
          "value": "base",
          "displayName": "Base"
        },
        {
          "value": "zh_CN",
          "displayName": "Chinese (China)"
        },
        {
          "value": "zh_TW",
          "displayName": "Chinese (Taiwan)"
        },
        {
          "value": "hr",
          "displayName": "Croatian"
        },
        {
          "value": "cs_CZ",
          "displayName": "Czech (Czechia)"
        },
        {
          "value": "da",
          "displayName": "Danish"
        },
        {
          "value": "nl",
          "displayName": "Dutch"
        },
        {
          "value": "nl_BE",
          "displayName": "Dutch (Belgium)"
        },
        {
          "value": "ka_GE",
          "displayName": "Georgian (Georgia)"
        },
        {
          "value": "de",
          "displayName": "German"
        },
        {
          "value": "de_AT",
          "displayName": "German (Austria)"
        },
        {
          "value": "de_CH",
          "displayName": "German (Switzerland)"
        },
        {
          "value": "el",
          "displayName": "Greek"
        },
        {
          "value": "en",
          "displayName": "English"
        },
        {
          "value": "en_AU",
          "displayName": "English (Australia)"
        },
        {
          "value": "en_AU_ocker",
          "displayName": "English (Australia Ocker)"
        },
        {
          "value": "en_BORK",
          "displayName": "English (Bork)"
        },
        {
          "value": "en_CA",
          "displayName": "English (Canada)"
        },
        {
          "value": "en_GB",
          "displayName": "English (Great Britain)"
        },
        {
          "value": "en_GH",
          "displayName": "English (Ghana)"
        },
        {
          "value": "en_HK",
          "displayName": "English (Hong Kong)"
        },
        {
          "value": "en_IE",
          "displayName": "English (Ireland)"
        },
        {
          "value": "en_IN",
          "displayName": "English (India)"
        },
        {
          "value": "en_NG",
          "displayName": "English (Nigeria)"
        },
        {
          "value": "en_US",
          "displayName": "English (United States)"
        },
        {
          "value": "en_ZA",
          "displayName": "English (South Africa)"
        },
        {
          "value": "eo",
          "displayName": "Esperanto"
        },
        {
          "value": "fa",
          "displayName": "Farsi/Persian"
        },
        {
          "value": "fi",
          "displayName": "Finnish"
        },
        {
          "value": "fr",
          "displayName": "French"
        },
        {
          "value": "fr_BE",
          "displayName": "French (Belgium)"
        },
        {
          "value": "fr_CA",
          "displayName": "French (Canada)"
        },
        {
          "value": "fr_CH",
          "displayName": "French (Switzerland)"
        },
        {
          "value": "fr_LU",
          "displayName": "French (Luxembourg)"
        },
        {
          "value": "fr_SN",
          "displayName": "French (Senegal)"
        },
        {
          "value": "he",
          "displayName": "Hebrew"
        },
        {
          "value": "hu",
          "displayName": "Hungarian"
        },
        
        {
          "value": "id_ID",
          "displayName": "Indonesian (Indonesia)"
        },
        {
          "value": "it",
          "displayName": "Italian"
        },
        {
          "value": "ja",
          "displayName": "Japanese"
        },
        
        {
          "value": "ko",
          "displayName": "Korean"
        },
        {
          "value": "lv",
          "displayName": "Latvian"
        },
        {
          "value": "mk",
          "displayName": "Macedonian"
        },
        {
          "value": "dv",
          "displayName": "Maldivian"
        },
        {
          "value": "nb_NO",
          "displayName": "Norwegian (Norway)"
        },
        {
          "value": "ne",
          "displayName": "Nepali"
        },
        {
          "value": "pl",
          "displayName": "Polish"
        },
        {
          "value": "pt_BR",
          "displayName": "Portuguese (Brazil)"
        },
        {
          "value": "pt_PT",
          "displayName": "Portuguese (Portugal)"
        },
        {
          "value": "ro",
          "displayName": "Romanian"
        },
        {
          "value": "ro_MD",
          "displayName": "Romanian (Moldova)"
        },
        {
          "value": "ru",
          "displayName": "Russian"
        },
        {
          "value": "sr_RS_latin",
          "displayName": "Serbian (Serbia, Latin)"
        },
        {
          "value": "sk",
          "displayName": "Slovak"
        },
        {
          "value": "es",
          "displayName": "Spanish"
        },
        {
          "value": "es_MX",
          "displayName": "Spanish (Mexico)"
        },
        {
          "value": "sv",
          "displayName": "Swedish"
        },
        {
          "value": "th",
          "displayName": "Thai"
        },
        {
          "value": "tr",
          "displayName": "Turkish"
        },
        {
          "value": "uk",
          "displayName": "Ukrainian"
        },
        {
          "value": "ur",
          "displayName": "Urdu"
        },
        {
          "value": "vi",
          "displayName": "Vietnamese"
        },
        {
          "value": "yo_NG",
          "displayName": "Yoruba (Nigeria)"
        },
        {
          "value": "zu_ZA",
          "displayName": "Zulu (South Africa)"
        }
      ]
    },
    "count": {
      "name": "count",
      "in": "query",
      "required": false,
      "type": "integer",
      "x-ms-summary": "Count",
      "x-ms-visibility": "important",
      "description": "Define how many objects you want returned. Default is ten."
    },
    "seed": {
      "name": "seed",
      "in": "query",
      "required": false,
      "type": "integer",
      "x-ms-summary": "Seed",
      "x-ms-visibility": "advanced",
      "description": "Seed value for reproducible results."
    }
  },
  "format": {
    "name": "format",
    "in": "query",
    "required": false,
    "type": "string",
    "x-ms-summary": "Format",
    "x-ms-visibility": "advanced",
    "description": "Select format of the color values. Default is decimal.",
    "enum": [
      "binary",
      "css",
      "decimal"
    ]
  },
  "responses": {},
  "securityDefinitions": {},
  "security": [],
  "tags": []
}